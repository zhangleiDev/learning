<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zle.dao.UserDao">
  <resultMap id="BaseResultMap" type="com.zle.entity.db.UserEntity">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="age" jdbcType="INTEGER" property="age" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="date" jdbcType="DATE" property="date" />
    <result column="date_time" jdbcType="TIMESTAMP" property="dateTime" />
    <result column="stamp" jdbcType="TIMESTAMP" property="stamp" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, name, age, email, date, date_time, stamp
  </sql>
  <select id="selectByExample" parameterType="com.zle.entity.db.UserEntityExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <delete id="deleteByExample" parameterType="com.zle.entity.db.UserEntityExample">
    delete from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insertSelective" parameterType="com.zle.entity.db.UserEntity">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="name != null">
        name,
      </if>
      <if test="age != null">
        age,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="date != null">
        date,
      </if>
      <if test="dateTime != null">
        date_time,
      </if>
      <if test="stamp != null">
        stamp,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        #{date,jdbcType=DATE},
      </if>
      <if test="dateTime != null">
        #{dateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stamp != null">
        #{stamp,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zle.entity.db.UserEntityExample" resultType="java.lang.Long">
    select count(*) from user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update user
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.name != null">
        name = #{record.name,jdbcType=VARCHAR},
      </if>
      <if test="record.age != null">
        age = #{record.age,jdbcType=INTEGER},
      </if>
      <if test="record.email != null">
        email = #{record.email,jdbcType=VARCHAR},
      </if>
      <if test="record.date != null">
        date = #{record.date,jdbcType=DATE},
      </if>
      <if test="record.dateTime != null">
        date_time = #{record.dateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.stamp != null">
        stamp = #{record.stamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update user
    set id = #{record.id,jdbcType=INTEGER},
      name = #{record.name,jdbcType=VARCHAR},
      age = #{record.age,jdbcType=INTEGER},
      email = #{record.email,jdbcType=VARCHAR},
      date = #{record.date,jdbcType=DATE},
      date_time = #{record.dateTime,jdbcType=TIMESTAMP},
      stamp = #{record.stamp,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zle.entity.db.UserEntity">
    update user
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="age != null">
        age = #{age,jdbcType=INTEGER},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="date != null">
        date = #{date,jdbcType=DATE},
      </if>
      <if test="dateTime != null">
        date_time = #{dateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="stamp != null">
        stamp = #{stamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <!--
      一对一

      select="com.zle.dao.BookDao.selectbookByid"
              com.zle.dao.BookDao 为对应mapper.xml的命名空间, dao中注解形式的方法是调用不到的.
      column="{id=bid}"
             bid当前sql查询返回结果,id:selectbookByid方法接受的参数,如果要传递多个值用{id=bid,name=bname}
      fetchType="eager"
           配置是否延时加载,默认为eager,当配置为lazy时只有当调用getBook()s或者对象的eqals,clone,hashCode,toStrin方法时才会查询
   -->
  <resultMap id="selectOrdersMap" type="com.zle.entity.db.UserEntity" extends="BaseResultMap">
    <association property="book" column="{id=bid}"
                 select="com.zle.dao.BookDao.selectbookByid" fetchType="eager"/>
  </resultMap>

  <select id="selectOrders" parameterType="com.zle.entity.db.UserEntityExample" resultMap="selectOrdersMap">
    select u.name,u.email,bo.bid bid
     from user u left JOIN book_order bo  ON u.id=bo.uid
  </select>
  <!-- 一对多1 -->
  <resultMap id="ordersMap" type="com.zle.entity.db.UserEntity" extends="BaseResultMap">
    <collection property="books" column="{id=bid}" select="com.zle.dao.BookDao.selectbookByid" />
  </resultMap>
  <select id="selectOrders2" parameterType="com.zle.entity.db.UserEntityExample" resultMap="ordersMap">
    select u.*,bo.bid bid
     from user u left JOIN book_order bo  ON u.id=bo.uid
  </select>

  <!-- 一对多2 -->
  <resultMap id="ordersMap2" type="com.zle.entity.db.UserEntity" extends="BaseResultMap">
    <collection property="books" columnPrefix="book_" resultMap="com.zle.dao.BookDao.BaseResultMap"/>
  </resultMap>
  <select id="selectOrders3" parameterType="com.zle.entity.db.UserEntityExample" resultMap="ordersMap2">
    select u.*,b.name as book_name,b.price as book_price
     from  user u
     left join book_order bo on u.id=bo.uid
     LEFT JOIN book b on bo.bid=b.id
  </select>
</mapper>